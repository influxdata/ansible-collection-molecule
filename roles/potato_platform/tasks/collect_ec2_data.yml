---
# Collect information about EC2 instances that's needed by Molecule later
#
# Expected input variables:
#  - __potato_platform_instance: The instance configuration, as returned by amazon.aws.ec2_instance_info
#
# Output:
#  - potato_platform_instance_configs: A list of dictionaries, each containing the instance config
#                           needed by the `platform` role to write Molecule instance configuration
#

- name: üêú Show AWS instance data
  ansible.builtin.debug:
    var: __potato_platform_instance
    verbosity: 1

- name: Collect tags matching hostvar mappings
  when: __potato_platform_cfg.tag_hostvar_mappings | length > 0
  ansible.builtin.set_fact:
    __potato_platform_tag_hostvars: "{{ __potato_platform_tag_hostvars | default({}) | combine({
      __potato_platform_item.hostvar: __potato_platform_instance.tags[__potato_platform_item.tag]
      }, recursive=true) }}"
  when: __potato_platform_instance.tags[__potato_platform_item.tag] is defined
  loop: "{{ __potato_platform_cfg.tag_hostvar_mappings }}"
  loop_control:
    loop_var: __potato_platform_item

# NOTE: Var is used by the `platform` role to write Molecule instance configuration
- name: Store instance configuration
  ansible.builtin.set_fact:
    potato_platform_instance_configs: "{{ potato_platform_instance_configs | default([]) + [{
      'instance': __potato_platform_instance.tags.Name,
      'address': __potato_platform_instance.public_ip_address,
      'user': __potato_platform_cfg.ssh_user,
      'port': __potato_platform_cfg.ssh_port,
      'identity_file': __potato_platform_cfg.private_key_path,
      'extra_hostvars': __potato_platform_tag_hostvars | default({})
      }] }}"

- name: üêú Show instance configuration
  ansible.builtin.debug:
    var: potato_platform_instance_configs
    verbosity: 1

