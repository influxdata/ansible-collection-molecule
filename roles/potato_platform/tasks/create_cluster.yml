---
# Create a cluster using Potato

- name: Validate configuration data
  ansible.builtin.include_tasks: "{{ role_path }}/tasks/validate_config.yml"

- name: Write run config to file
  ansible.builtin.copy:
    dest: "{{ potato_platform_run_config_path }}"
    content: "{{ potato_platform_run_config | to_yaml }}"
    mode: "0600"

- name: Look up subnets to determine VPCs (if needed)
  amazon.aws.potato_vpc_subnet_info:
    subnet_ids: "{{ __potato_platform_cfg.vpc_subnet_id }}"
  when: not __potato_platform_cfg.vpc_id
  register: __potato_platform_subnet_info

- name: Validate discovered information
  ansible.builtin.assert:
    that:
      - __potato_platform_cfg.vpc_id or (__potato_platform_subnet_info.results[0].subnets | length > 0)
    quiet: true

- name: Create ephemeral security groups (if needed)
  amazon.aws.potato_security_group:
    profile: "{{ __potato_platform_cfg.aws_profile | default(omit) }}"
    iam_instance_profile: "{{ __potato_platform_cfg.iam_instance_profile | default(omit) }}"
    region: "{{ __potato_platform_cfg.region | default(omit) }}"
    vpc_id: "{{ __potato_platform_cfg.vpc_id or vpc_subnet.vpc_id }}"
    name: "{{ __potato_platform_cfg.security_group_name }}"
    description: "{{ __potato_platform_cfg.security_group_description }}"
    rules: "{{ __potato_platform_cfg.security_group_rules }}"
    rules_egress: "{{ __potato_platform_cfg.security_group_rules_egress }}"
    tags:
      Name: "{{ __potato_platform_cfg.security_group_name }}"
  vars:
    vpc_subnet: "{{ __potato_platform_subnet_info.results[0].subnets[0] }}"
  when: __potato_platform_cfg.security_groups | length == 0

- name: Search for existing EC2 instances
  amazon.aws.ec2_instance_info:
    profile: "{{ __potato_platform_cfg.aws_profile | default(omit) }}"
    region: "{{ __potato_platform_cfg.region }}"
    filters:
      "tag:molecule-run-id": "{{ __potato_platform_run_config.run_id }}"
  register: __potato_platform_ec2_instances

- name: No existing instances found, create a new cluster
  when: __potato_platform_ec2_instances.instances | length == 0
  block:
    - name: ðŸ¥” Create InfluxDB Enterprise cluster
      ansible.builtin.uri:
        url: "{{ potato_platform_url }}/clusters"
        body_format: json
        body: "{{ potato_platform_creation_request_body }}"
        method: POST
        user: "{{ potato_platform_api_creds.username }}"
        password: "{{ potato_platform_api_creds.password }}"
      register: __potato_platform_cluster_creation_potato_response

    - name: Extract cluster creation response
      when: __potato_platform_cluster_creation_potato_response.status == 201
      ansible.builtin.set_fact:
        __potato_platform_creation_response: "{{ __potato_platform_cluster_creation_potato_response.json }}"

    - name: Validate cluster creation response
      ansible.builtin.assert:
        that:
          - __potato_platform_creation_response is defined
          - __potato_platform_creation_response is mapping
          - __potato_platform_creation_response.id is string and __potato_platform_creation_response.id | length > 0
          - __potato_platform_creation_response.status is string
        fail_msg: "Cluster creation failed with response: {{ __potato_platform_cluster_creation_potato_response }}"
        success_msg: "Cluster creation request successful"

    - name: Wait for cluster creation to complete
      when: not __potato_platform_cfg.ignore_potato_machines_status
      ansible.builtin.uri:
        url: "{{ potato_platform_url }}/clusters/{{ __potato_platform_creation_response.id }}"
        method: GET
        user: "{{ potato_platform_api_creds.username }}"
        password: "{{ potato_platform_api_creds.password }}"
        return_content: true
      register: __potato_platform_cluster_creation_status
      until: __potato_platform_cluster_creation_status.json.status == 'running'
      retries: "{{ potato_platform_creation_retries | int / 10 }}"
      delay: 10

    - name: Wait for Potato timeout (ignore Potato machines status)
      when: __potato_platform_cfg.ignore_potato_machines_status
      ansible.builtin.pause:
        seconds: "{{ potato_platform_creation_timeout }}"

    - name: Locate cluster EC2 instances
      amazon.aws.ec2_instance_info:
        profile: "{{ __potato_platform_cfg.aws_profile | default(omit) }}"
        region: "{{ __potato_platform_cfg.region }}"
        filters:
          "tag:ClusterID": "{{ __potato_platform_creation_response.id }}"
          instance-state-name: ["running"]
      register: __potato_platform_ec2_instances

- name: Add Molecule access security group to hosts
  vars:
    __potato_platform_additional_tags:
      molecule-run-id: "{{ potato_platform_run_config.run_id }}"
      created_by: Molecule CI
    __potato_platform_ec2_current_security_groups: "{{ __potato_platform_ec2_instances.instances[0].security_groups |
                                                      map(attribute='group_id') | list }}"
  amazon.aws.ec2_instance:
    profile: "{{ __potato_platform_cfg.aws_profile | default(omit) }}"
    instance_ids: "{{ __potato_platform_ec2_instances.instances | map(attribute='instance_id') | list }}"
    security_groups: "{{ __potato_platform_cfg.security_groups + __potato_platform_ec2_current_security_group}}"
    tags: "{{ __potato_platform_cfg.tags | combine(__potato_platform_additional_tags) }}"
    state: present

- name: Copy private key to Molecule config
  ansible.builtin.copy:
    src: "{{ __potato_platform_cfg.private_key_source_path }}"
    dest: "{{ __potato_platform_cfg.private_key_path }}"
    mode: "0600"

# NOTE: Var is used by the `platform` role to write Molecule instance configuration
- name: Collect instance configs
  vars:
    __potato_platform_instance: "{{ __potato_instance_creation.instances[0] }}"
  ansible.builtin.set_fact:
    potato_platform_instance_config:
      instance: "{{ __potato_platform_cfg.name }}"
      address: "{{ __potato_platform_cfg.assign_public_ip | ternary(__potato_platform_instance.public_ip_address, __potato_platform_instance.private_ip_address) }}"
      user: "{{ __potato_platform_cfg.ssh_user }}"
      port: "{{ __potato_platform_cfg.ssh_port }}"
      identity_file: "{{ __potato_platform_cfg.private_key_path }}"
      instance_ids:
        - "{{ __potato_platform_instance.instance_id }}"

- name: Wait for SSH connectivity
  ansible.builtin.wait_for:
    host: "{{ potato_platform_instance_config.address }}"
    port: "{{ potato_platform_instance_config.port }}"
    search_regex: SSH
    delay: 10
    timeout: 320

# TODO: Add an actual check here instead of only waiting
- name: Wait for boot process to finish
  ansible.builtin.pause:
    seconds: "{{ __potato_platform_cfg.boot_wait_seconds }}"

