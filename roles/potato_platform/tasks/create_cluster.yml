---
# Create a cluster using Potato

- name: Validate configuration data
  ansible.builtin.include_tasks: "{{ role_path }}/tasks/validate_config.yml"

- name: Write run config to file
  ansible.builtin.copy:
    dest: "{{ potato_platform_run_config_path }}"
    content: "{{ potato_platform_run_config | to_yaml }}"
    mode: "0600"

- name: Look up subnets to determine VPCs (if needed)
  amazon.aws.ec2_vpc_subnet_info:
    subnet_ids: "{{ __potato_platform_cfg.vpc_subnet_id }}"
  when: not __potato_platform_cfg.vpc_id
  register: __potato_platform_subnet_info

- name: Validate discovered information
  ansible.builtin.assert:
    that:
      - __potato_platform_cfg.vpc_id or (__potato_platform_subnet_info.results[0].subnets | length > 0)
    quiet: true

- name: Create ephemeral security groups (if needed)
  amazon.aws.ec2_security_group:
    profile: "{{ __potato_platform_cfg.aws_profile | default(omit) }}"
    iam_instance_profile: "{{ __potato_platform_cfg.iam_instance_profile | default(omit) }}"
    region: "{{ __potato_platform_cfg.region | default(omit) }}"
    vpc_id: "{{ __potato_platform_cfg.vpc_id or vpc_subnet.vpc_id }}"
    name: "{{ __potato_platform_cfg.security_group_name }}"
    description: "{{ __potato_platform_cfg.security_group_description }}"
    rules: "{{ __potato_platform_cfg.security_group_rules }}"
    rules_egress: "{{ __potato_platform_cfg.security_group_rules_egress }}"
    tags:
      Name: "{{ __potato_platform_cfg.security_group_name }}"
  vars:
    vpc_subnet: "{{ __potato_platform_subnet_info.results[0].subnets[0] }}"
  when: __potato_platform_cfg.security_groups | length == 0
  register: __potato_platform_ephemeral_security_group

- name: Search for existing EC2 instances
  amazon.aws.ec2_instance_info:
    profile: "{{ __potato_platform_cfg.aws_profile | default(omit) }}"
    region: "{{ __potato_platform_cfg.region }}"
    filters:
      "tag:molecule-run-id": "{{ potato_platform_run_config.run_id }}"
  register: __potato_platform_existing_ec2_instances

- name: No existing instances found, create a new cluster
  when: __potato_platform_existing_ec2_instances.instances | length == 0
  vars:
    # Inject Molecule tags into the Potato cluster configuration
    __potato_platform_molecule_tags:
      tags:
        molecule-run-id: "{{ potato_platform_run_config.run_id }}"
        created_by: Molecule CI
  block:
    - name: Combine runtime tags
      ansible.builtin.set_fact:
        __potato_platform_potato_cluster_runtime_cfg: "{{ __potato_platform_potato_cluster_cfg | combine(__potato_platform_molecule_tags, recursive=true) }}"

    - name: 🐜 Show Potato cluster configuration
      ansible.builtin.debug:
        var: __potato_platform_potato_cluster_runtime_cfg
        verbosity: 1

    - name: 🥔 Create InfluxDB Enterprise cluster
      vars:
      ansible.builtin.uri:
        url: "{{ potato_platform_url }}/clusters"
        body_format: json
        body: "{{ __potato_platform_potato_cluster_runtime_cfg }}"
        method: POST
        user: "{{ potato_platform_api_creds.username }}"
        password: "{{ potato_platform_api_creds.password }}"
        status_code:
          - 200
          - 201
      register: __potato_platform_cluster_creation_potato_response

    - name: Extract cluster creation response
      when: __potato_platform_cluster_creation_potato_response.status == 201
      ansible.builtin.set_fact:
        __potato_platform_creation_response: "{{ __potato_platform_cluster_creation_potato_response.json }}"

    - name: Show Potato cluster creation response
      ansible.builtin.debug:
        var: __potato_platform_creation_response
        verbosity: 1

    - name: Validate cluster creation response
      ansible.builtin.assert:
        that:
          - __potato_platform_creation_response is defined
          - __potato_platform_creation_response is mapping
          - __potato_platform_creation_response.id is string and __potato_platform_creation_response.id | length > 0
          - __potato_platform_creation_response.machines_status is string
        fail_msg: "Cluster creation failed with response: {{ __potato_platform_cluster_creation_potato_response }}"
        success_msg: "Cluster creation request successful"

    - name: Wait for cluster creation to complete
      when: not __potato_platform_cfg.ignore_potato_machines_status
      ansible.builtin.uri:
        url: "{{ potato_platform_url }}/clusters/{{ __potato_platform_creation_response.id }}"
        method: GET
        user: "{{ potato_platform_api_creds.username }}"
        password: "{{ potato_platform_api_creds.password }}"
        return_content: true
      register: __potato_platform_cluster_creation_status
      until: __potato_platform_cluster_creation_status.json.machines_status == 'running'
      retries: "{{ (__potato_platform_cfg.creation_timeout | int / 10) | int }}"
      delay: 10

    - name: Wait for Potato timeout (ignore Potato machines status)
      when: __potato_platform_cfg.ignore_potato_machines_status
      ansible.builtin.pause:
        seconds: "{{ __potato_platform_cfg.creation_timeout }}"

    - name: Locate cluster EC2 instances
      amazon.aws.ec2_instance_info:
        profile: "{{ __potato_platform_cfg.aws_profile | default(omit) }}"
        region: "{{ __potato_platform_cfg.region }}"
        filters:
          "tag:ClusterID": "{{ __potato_platform_creation_response.id }}"
          instance-state-name: ["running"]
      register: __potato_platform_new_ec2_instances

- name: Show existing instances
  ansible.builtin.debug:
    var: __potato_platform_existing_ec2_instances
    verbosity: 1

- name: Modify EC2 instances
  vars:
    __potato_platform_ec2_instances: "{{ __potato_platform_existing_ec2_instances if __potato_platform_new_ec2_instances.skipped | default(false) else __potato_platform_new_ec2_instances }}"
  block:
    - name: Show target ec2 instances
      ansible.builtin.debug:
        var: __potato_platform_ec2_instances
        verbosity: 2

    - name: Show existing security groups for instance 0
      ansible.builtin.debug:
        var: __potato_platform_ec2_instances.instances[0].security_groups | map(attribute='group_id') | list
        verbosity: 1

    # NOTE: This assumes that all cluster members have the same security groups!
    - name: Add Molecule access security group to hosts
      vars:
        __potato_platform_ec2_current_security_groups: "{{ __potato_platform_ec2_instances.instances[0].security_groups | map(attribute='group_id') | list }}"
        __potato_platform_molecule_security_groups: "{{ __potato_platform_cfg.security_groups or [__potato_platform_cfg.security_group_name] }}"
      amazon.aws.ec2_instance:
        profile: "{{ __potato_platform_cfg.aws_profile | default(omit) }}"
        instance_ids: "{{ __potato_platform_ec2_instances.instances | map(attribute='instance_id') | list }}"
        security_groups: "{{ __potato_platform_molecule_security_groups + __potato_platform_ec2_current_security_groups }}"
        state: running

    - name: Copy private key to Molecule config
      ansible.builtin.copy:
        src: "{{ __potato_platform_cfg.private_key_source_path }}"
        dest: "{{ __potato_platform_cfg.private_key_path }}"
        mode: "0600"

    # NOTE: Var is used by the `platform` role to write Molecule instance configuration
    - name: Collect instance configs
      ansible.builtin.set_fact:
        potato_platform_instance_configs: "{{ potato_platform_instance_configs | default([]) + [{
          'instance': __potato_platform_instance.tags.Name,
          'address': __potato_platform_instance.public_ip_address,
          'user': __potato_platform_cfg.ssh_user,
          'port': __potato_platform_cfg.ssh_port,
          'identity_file': __potato_platform_cfg.private_key_path,
          }] }}"
      loop: "{{ __potato_platform_ec2_instances.instances }}"
      loop_control:
        loop_var: __potato_platform_instance
        label: "{{ __potato_platform_instance.instance_id }}"

    - name: Check SSH connectivity
      ansible.builtin.wait_for:
        host: "{{ __potato_platform_instance.public_ip_address }}"
        port: "{{ __potato_platform_cfg.ssh_port }}"
        search_regex: SSH
        delay: 10
        timeout: 320
      async: 350
      poll: 0
      register: __potato_platform_ssh_connectivity_check
      loop: "{{ __potato_platform_ec2_instances.instances }}"
      loop_control:
        loop_var: __potato_platform_instance
        label: "{{ __potato_platform_instance.instance_id }}"

    - name: Show SSH connectivity check results
      ansible.builtin.debug:
        var: __potato_platform_ssh_connectivity_check
        verbosity: 1

    - name: Wait for SSH connectivity checks to finish
      ansible.builtin.include_tasks: "{{ role_path }}/tasks/check_async_tasks.yml"
      loop: "{{ __potato_platform_ssh_connectivity_check.results }}"
      loop_control:
        loop_var: __potato_platform_async_job

# TODO: Add an actual check here instead of only waiting
- name: Wait for boot process to finish
  ansible.builtin.pause:
    seconds: "{{ __potato_platform_cfg.boot_wait_seconds }}"

